#!/bin/bash

# Suricata Direct Kafka Streaming - Usage Guide
# This script provides quick commands for using the Kafka streaming setup

YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${GREEN}"
echo "================================================================"
echo "  SURICATA DIRECT KAFKA STREAMING - QUICK START GUIDE"
echo "================================================================"
echo -e "${NC}"

echo "This setup streams Suricata events directly to Kafka with:"
echo "‚úÖ Zero file I/O (no eve.json or log files)"
echo "‚úÖ DPDK high-performance packet capture"
echo "‚úÖ Async/batching Kafka producer"
echo "‚úÖ Multiple topics for different event types"
echo ""

echo -e "${BLUE}üìã SETUP STEPS:${NC}"
echo "1. Install Suricata with Kafka support:"
echo "   sudo ./install_suricata_kafka.sh"
echo ""
echo "2. Setup Kafka topics:"
echo "   ./setup_kafka.sh"
echo ""
echo "3. Update configuration (suricata-kafka.yaml):"
echo "   - Set your DPDK interface PCI address"
echo "   - Update Kafka broker addresses if needed"
echo ""
echo "4. Start services:"
echo "   sudo systemctl start zookeeper kafka suricata-kafka"
echo ""

echo -e "${BLUE}üîç VALIDATION:${NC}"
echo "Run comprehensive validation:"
echo "   ./validate_kafka_streaming.sh"
echo ""
echo "Or run full integration test:"
echo "   ./integration_test.sh"
echo ""

echo -e "${BLUE}üìä MONITORING:${NC}"
echo "Real-time event monitoring:"
echo "   python3 kafka_consumer.py"
echo ""
echo "Quick event check:"
echo "   python3 kafka_monitor.py suricata-events --max 10"
echo ""
echo "Monitor specific topics:"
echo "   python3 kafka_monitor.py suricata-alerts"
echo "   python3 kafka_monitor.py suricata-stats"
echo ""

echo -e "${BLUE}üß™ TESTING:${NC}"
echo "Generate test traffic:"
echo "   sudo ./generate_test_traffic.sh"
echo ""
echo "Manual testing:"
echo "   curl -s 'http://testmyids.com/uid/index.html?test=../../../etc/passwd'"
echo "   nmap -sS localhost"
echo ""

echo -e "${BLUE}üîß TROUBLESHOOTING:${NC}"
echo "Check services:"
echo "   sudo systemctl status suricata-kafka kafka zookeeper"
echo ""
echo "View logs:"
echo "   journalctl -u suricata-kafka -f"
echo "   journalctl -u kafka -f"
echo ""
echo "List Kafka topics:"
echo "   python3 kafka_monitor.py --list"
echo ""
echo "Check for log files (should be none):"
echo "   ls -la /var/log/suricata/"
echo ""

echo -e "${BLUE}üìÅ KEY FILES:${NC}"
echo "Configuration:"
echo "   suricata-kafka.yaml          # Main Suricata config (NO file outputs)"
echo ""
echo "Services:"
echo "   suricata-kafka.service       # Systemd service for DPDK + Kafka"
echo ""
echo "Scripts:"
echo "   install_suricata_kafka.sh    # Installation with Kafka support"
echo "   setup_kafka.sh               # Kafka topic setup"
echo "   validate_kafka_streaming.sh  # Validation script"
echo "   integration_test.sh          # Full end-to-end test"
echo "   generate_test_traffic.sh     # Traffic generator"
echo ""
echo "Monitoring:"
echo "   kafka_consumer.py            # Full-featured consumer"
echo "   kafka_monitor.py             # Quick CLI monitor"
echo ""

echo -e "${BLUE}üìà TOPICS:${NC}"
echo "   suricata-events              # All EVE events (main stream)"
echo "   suricata-alerts              # Security alerts only"
echo "   suricata-stats               # Performance statistics"
echo ""

echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANT CONFIGURATION:${NC}"
echo "Before starting, update suricata-kafka.yaml:"
echo ""
echo "1. DPDK Interface (replace with your PCI address):"
echo "   dpdk:"
echo "     interfaces:"
echo "       - interface: 0000:XX:XX.X  # YOUR PCI ADDRESS HERE"
echo ""
echo "2. Kafka Brokers (if not localhost):"
echo "   kafka:"
echo "     bootstrap-servers: \"your-kafka-broker:9092\""
echo ""

echo -e "${GREEN}üéØ SUCCESS CRITERIA:${NC}"
echo "When working correctly, you should see:"
echo "‚úÖ Events flowing to Kafka topics in real-time"
echo "‚úÖ NO log files in /var/log/suricata/"
echo "‚úÖ Suricata process running with DPDK"
echo "‚úÖ Consumer receiving events without delay"
echo ""

echo "================================================================"
echo -e "${GREEN}Ready to start? Run: ./integration_test.sh${NC}"
echo "================================================================"
