#!/bin/bash

# Visual System Architecture Display
# Shows exactly how packets flow through your IDS pipeline

echo "üîç IDS PIPELINE ARCHITECTURE - Real-time Packet Flow"
echo "===================================================="
echo ""

echo "üì¶ PACKET SOURCES"
echo "‚îú‚îÄ‚îÄ Physical Interface: enp2s0"
echo "‚îú‚îÄ‚îÄ Test Traffic: curl, nslookup, ping"
echo "‚îú‚îÄ‚îÄ DPDK Generators: packet_generator.py (future)"
echo "‚îî‚îÄ‚îÄ Normal OS Traffic: updates, browsing, etc."
echo ""

echo "üîÑ PACKET CAPTURE & PROCESSING"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ  STEP 1: Network Interface (enp2s0)    ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Receives all network packets       ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Current: AF_PACKET mode            ‚îÇ"
echo "‚îÇ  ‚îî‚îÄ‚îÄ Future: DPDK mode (10x faster)    ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo "                    ‚îÇ"
echo "                    ‚ñº"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ  STEP 2: Suricata IDS Engine           ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Deep Packet Inspection            ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Rule-based Detection              ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Protocol Analysis                 ‚îÇ"
echo "‚îÇ  ‚îî‚îÄ‚îÄ Event Generation                  ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo "                    ‚îÇ"
echo "                    ‚ñº"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ  STEP 3: EVE.json Logging              ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ /var/log/suricata/eve.json        ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Structured JSON events            ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Real-time append                  ‚îÇ"
echo "‚îÇ  ‚îî‚îÄ‚îÄ Event types: alert/flow/http/dns  ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo "                    ‚îÇ"
echo "                    ‚ñº"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ  STEP 4: EVE-Kafka Bridge              ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ File monitoring (watchdog)        ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Real-time JSON parsing            ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ Event type classification         ‚îÇ"
echo "‚îÇ  ‚îî‚îÄ‚îÄ Kafka topic routing               ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo "                    ‚îÇ"
echo "                    ‚ñº"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ  STEP 5: Kafka Topics                  ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ suricata-events: General events   ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ suricata-alerts: Security alerts  ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ suricata-stats: Performance data  ‚îÇ"
echo "‚îÇ  ‚îî‚îÄ‚îÄ Compression: gzip                 ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo "                    ‚îÇ"
echo "                    ‚ñº"
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ  STEP 6: Event Consumers               ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ kafka_consumer.py                 ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ kafka_monitor.py                  ‚îÇ"
echo "‚îÇ  ‚îú‚îÄ‚îÄ SIEM integrations                 ‚îÇ"
echo "‚îÇ  ‚îî‚îÄ‚îÄ ML/AI analysis engines            ‚îÇ"
echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
echo ""

echo "üìä CURRENT SYSTEM STATUS"
echo "========================"

# Check if Suricata is running
if systemctl is-active --quiet suricata-simple; then
    echo "‚úÖ Suricata: RUNNING (monitoring enp2s0)"
else
    echo "‚ùå Suricata: STOPPED"
fi

# Check if bridge is running
if pgrep -f "eve_kafka_bridge.py" > /dev/null; then
    echo "‚úÖ EVE-Kafka Bridge: RUNNING"
else
    echo "‚ùå EVE-Kafka Bridge: STOPPED"
fi

# Check Kafka topics
echo "‚úÖ Kafka Topics:"
/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list 2>/dev/null | grep suricata | while read topic; do
    echo "   ‚îî‚îÄ‚îÄ $topic"
done

echo ""
echo "üîß HOW TO GENERATE TEST TRAFFIC"
echo "==============================="
echo "1. Web requests:    curl -s http://www.google.com"
echo "2. DNS queries:     nslookup google.com"
echo "3. Port scans:      nmap -p 80,443 8.8.8.8"
echo "4. Bulk testing:    ./generate_test_traffic.sh"
echo "5. DPDK generator:  python3 DPDK_Packet_Testing/packet_generator.py"
echo ""

echo "üéØ HOW TO MONITOR EVENTS"
echo "========================"
echo "1. Real-time consumer:  python3 kafka_consumer.py"
echo "2. Topic monitor:       python3 kafka_monitor.py"
echo "3. EVE.json direct:     tail -f /var/log/suricata/eve.json"
echo "4. Suricata stats:      tail -f /var/log/suricata/suricata.log"
echo ""

echo "üìà RECENT ACTIVITY"
echo "=================="
if [ -f "/var/log/suricata/eve.json" ]; then
    echo "EVE.json entries (last 5):"
    tail -5 /var/log/suricata/eve.json | jq -r '.timestamp + " | " + .event_type + " | " + (.src_ip // "N/A") + " -> " + (.dest_ip // "N/A")' 2>/dev/null || tail -5 /var/log/suricata/eve.json | head -c 200
    echo "..."
else
    echo "‚ùå No EVE.json file found"
fi

echo ""
echo "üöÄ NEXT STEPS FOR HIGH PERFORMANCE"
echo "=================================="
echo "1. Enable DPDK in Suricata for kernel bypass"
echo "2. Compile Suricata with native Kafka support"
echo "3. Configure DPDK packet generators"
echo "4. Add hardware-accelerated packet capture"
echo "5. Integrate with machine learning pipelines"
